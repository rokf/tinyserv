#!/usr/bin/env lua

local server = require 'http.server'
local headers = require 'http.headers'
local version = require 'http.version'
local util = require 'http.util'

local cqueues = require 'cqueues'
local signal = require 'cqueues.signal'

local port = arg[1] and tonumber(arg[1]) or 8000

print('Starting on port', port)

local lt = {
  [".3g2"] = "video/3gpp2",
  [".3gp"] = "video/3gpp",
  [".7z"] = "application/x-7z-compressed",
  [".aac"] = "audio/aac",
  [".abw"] = "application/x-abiword",
  [".arc"] = "application/octet-stream",
  [".avi"] = "video/x-msvideo",
  [".azw"] = "application/vnd.amazon.ebook",
  [".bin"] = "application/octet-stream",
  [".bz"] = "application/x-bzip",
  [".bz2"] = "application/x-bzip2",
  [".csh"] = "application/x-csh",
  [".css"] = "text/css",
  [".csv"] = "text/csv",
  [".doc"] = "application/msword",
  [".docx"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  [".eot"] = "application/vnd.ms-fontobject",
  [".epub"] = "application/epub+zip",
  [".gif"] = "image/gif",
  [".htm"] = "text/html",
  [".html"] = "text/html",
  [".ico"] = "image/x-icon",
  [".ics"] = "text/calendar",
  [".jar"] = "application/java-archive",
  [".jpeg"] = "image/jpeg",
  [".jpg"] = "image/jpeg",
  [".js"] = "application/javascript",
  [".json"] = "application/json",
  [".mid"] = "audio/midi",
  [".midi"] = "audio/midi",
  [".mpeg"] = "video/mpeg",
  [".mpkg"] = "application/vnd.apple.installer+xml",
  [".odp"] = "application/vnd.oasis.opendocument.presentation",
  [".ods"] = "application/vnd.oasis.opendocument.spreadsheet",
  [".odt"] = "application/vnd.oasis.opendocument.text",
  [".oga"] = "audio/ogg",
  [".ogv"] = "video/ogg",
  [".ogx"] = "application/ogg",
  [".otf"] = "font/otf",
  [".pdf"] = "application/pdf",
  [".png"] = "image/png",
  [".ppt"] = "application/vnd.ms-powerpoint",
  [".pptx"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  [".rar"] = "application/x-rar-compressed",
  [".rtf"] = "application/rtf",
  [".sh"] = "application/x-sh",
  [".svg"] = "image/svg+xml",
  [".swf"] = "application/x-shockwave-flash",
  [".tar"] = "application/x-tar",
  [".tif"] = "image/tiff",
  [".tiff"] = "image/tiff",
  [".ts"] = "application/typescript",
  [".ttf"] = "font/ttf",
  [".vsd"] = "application/vnd.visio",
  [".wav"] = "audio/x-wav",
  [".weba"] = "audio/webm",
  [".webm"] = "video/webm",
  [".webp"] = "image/webp",
  [".woff"] = "font/woff",
  [".woff2"] = "font/woff2",
  [".xhtml"] = "application/xhtml+xml",
  [".xls"] = "application/vnd.ms-excel",
  [".xlsx"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  [".xml"] = "application/xml",
  [".xul"] = "application/vnd.mozilla.xul+xml",
  [".zip"] = "application/zip"
}

local gen_ct = function (path)
  local s = string.match(path,"(%.%a+)$")
  if s == nil or lt[s] == nil then return 'text/plain' end
  return lt[s]
end

local cq = cqueues.new()

local sl = signal.listen(signal.SIGINT)
signal.block(signal.SIGINT)

cq:wrap(function ()
  local signo

  while true do
    signo = sl:wait(0.5)

    if signo == signal.SIGINT then
      print('\nINTERRUPTED!')
      os.exit(true)
    end
  end
end)

cq:wrap(function ()
  local instance = server.listen({
    host = "127.0.0.1",
    port = port,
    onstream = function (_,st)
      local request_headers = st:get_headers()
      local method = request_headers:get(":method")
      local path = request_headers:get(":path")

      local response_headers = headers.new()
      response_headers:append(":status", nil)
      response_headers:append("server", string.format("%s/%s",version.name, version.version))
      response_headers:append("date", util.imf_date())

      if method ~= "GET" and method ~= "HEAD" then
        response_headers:upsert(":status", "405")
        st:write_headers(response_headers, true)
        return
      else
        local filename = "index.html"
        if path ~= "/" then
          filename = string.sub(path,2,-1)
        end
        print('serving',filename)
        local file = io.open(filename, 'rb')

        if file ~= nil then
          response_headers:upsert(":status", "200")
          response_headers:append("content-type", gen_ct(filename))
          st:write_headers(response_headers, false)
          st:write_body_from_file(file)
          file:close()
        else
          response_headers:upsert(":status", "404")
          response_headers:append("content-type", "text/html; charset=utf-8")
          st:write_headers(response_headers, false)
          st:write_body_from_string(string.format("<p>[<b>404</b>] File '%s' does not exist!</p>",filename))
        end
      end
    end
  })

  instance:loop()
end)

cq:loop()

